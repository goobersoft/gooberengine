
----------------
|  To-Do List  |
----------------



COLORMAP EDITOR
---------------

  Part of the editor application. I want to be able to make and edit colormaps
  and then save them to some sort of string format that can be included in an
  application elsewhere.

  Sample format:
  "4 4 -----ff--ff-----"

  The dashes would mean transparent pixels. All pixel data would be in base64.
  Since gooberengine only uses 64 colors, base64 would be very useful here.

  One question to ask is if we should be allowed to set the size of the
  colormap, or just restrict it to 400x240 pixels? If the latter is the case,
  then we should be permitted to work on sections of the colormap, like tiles
  or tile ranges.




PATTERN EDITOR
--------------
  
  Implement an editor so that I can make patterns and same them as
  some sort of file format.

  How would I even do that? Maybe a string which contains the id of
  the colormap, the tile width and height, and the data?

  An example of a 4x4 tilemap with all cells set to 0:
  "gb-0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"

  A typical colormap or image page for gooberengine is 400x240 pixels.
  This means that there are 960 tiles per page. It does not make the string
  any more compact to try and store this information as hex values.
  I may however use the constant '-' instead of '0' to indicate that the
  tile is empty, and should be transparent:
  "gb-0 4 4 - - - - - - - - - - - - - - - -"

  Using this method, the system knows that nothing should be in those cells,
  and index 0 for the colormap could have something filled into it. The constant
  '-' could either mean '-1' or a special transparent index which is one number
  higher than the colormap's index range like '960'.

  Just another thought: the above example uses spaces. We could string together
  dashes to indicate a long line of transparent tiles:
  "gb-0 4 4 -------- 10 10 10 10 ----"

  We could also implement a number after a single dash to tell the program
  that there's a long string of transparent tiles:
  "gb-0 4 4 -8 10 10 10 10 -4"

  This seems easy to understand, actually. The -x initially doesn't make
  sense as a tile index, so the brain switches to it meaning x amount of
  dashes. I like this, but I probably won't later.




GENERATED SOUND
---------------

  While I do have the ability in the audio module to load and use sounds, I
  would ideally like to bew able to generate waveforms so that I can utilize
  manipulation of them and mix them into the game's audio output. I'm thinking
  like modular tracker music or sounds which work off of patterns. These would
  work as the engine's default sound output method, but also allow audio streams
  from OGG files to be played?




NETWORKING
----------

  There's nothing made in the network module yet. I just haven't gone around to
  making it yet.




GBML + GBS
----------

  These are objects which are utilized for markup and scripting respectively.
  GBML: GooberMarkup
  GBS:  GooberScript

  ------

  Example GBML:

  a {                      <-- directory a
    b = 10;                <-- b as a number
    c = "Hello there.";    <-- c as a string
    d {                    <-- d as a nested directory
      e; f; g; h;          <-- e, f, g, h as keys with no values
    }
    i = #50;               <-- convert to integer
    j = $60;               <-- convert to string
  }

  ------

  GBS is meant to be a chain-based scripting language. What this means is that
  the script does not operate on an array of commands internally, but rather
  linked nodes. Currently the scripting syntax is not yet developed, but might
  look loosely like:

  decl x        <-- declare x as 0
  decl y        <-- declare y as 0
  let x 10      <-- set x to integer 10
  let y 20      <-- set y to integer 20
  let z 0       <-- set z to 0
  add z x       <-- add x to z
  add z y       <-- add y to z
  print z       <-- print z (30)
  let i 0       <-- set i to 0
  label hello   <-- declare label named "hello"
  add i 1       <-- add 1 to i
  neq i 100     <-- execute next line if i is not 100
  goto label    <-- this is skipped if i is 100

  I think internally the variables used in the script will be held using
  a dictionary, and since dictentries can hold IDs of their type, it would
  be used to determine the actual data type of the internal data.

  GBS would also keep track of declared labels as "bookmarks" and then skip
  back to them when 'goto' is called with the label name.



MAKE A GAME ALREADY
-------------------

  Okay fine jeez.