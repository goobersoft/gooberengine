



///////////////////////
// gbml parse object //
///////////////////////

#define gbmlparser_max_word_size() 64
#define gbmlparser_state_key()      0
#define gbmlparser_state_value()    1

type() {
	// input string
	local( string_t * input );
	// current scope level
	int        scope;
	// contains the dictionaries
	local( list_t * stack );
	// current dictionary
	local( dict_t * curr );
	// current char
	char       curr_char;
	// current word
	local( string_t * curr_word );
	// current word cursor
	int        curr_word_c;
	// boolean quote mode
	bool_t     quote_mode;
	// state
	int        state;
	// key and value
	local( string_t * curr_key );
	local( string_t * curr_value );


} gbmlparser_t;

#define gbmlparser_input(self) 				(self->input)
#define gbmlparser_scope(self) 				(self->scope)
#define gbmlparser_stack(self) 				(self->stack)
#define gbmlparser_curr(self)					(self->curr)
#define gbmlparser_curr_char(self)  	(self->curr_char)
#define gbmlparser_curr_word(self)  	(self->curr_word)
#define gbmlparser_curr_word_c(self) 	(self->curr_word_c)
#define gbmlparser_quote_mode(self) 	(self->quote_mode)
#define gbmlparser_state(self)      	(self->state)
#define gbmlparser_curr_key(self)   	(self->curr_key)
#define gbmlparser_curr_value(self) 	(self->curr_value)

void gbmlparser_init( gbmlparser_t * self, string_t * s ) {
	gbmlparser_input(self)   		  = s;
	gbmlparser_scope(self) 			  = 0;
	gbmlparser_stack(self) 			  = list();
	gbmlparser_curr(self)    		  = dict();
	gbmlparser_curr_char(self) 	  = ' ';
	gbmlparser_curr_word(self)    = string(gbmlparser_max_word_size());
	gbmlparser_curr_word_c(self)  = 0;
	gbmlparser_quote_mode(self)   = false();
	gbmlparser_state(self)        = 0;
	gbmlparser_curr_key(self)     = string(gbmlparser_max_word_size());
	gbmlparser_curr_value(self)   = string(gbmlparser_max_word_size());
}

gbmlparser_t * gbmlparser( string_t * s ) {
	gbmlparser_t * r = alloc(gbmlparser_t);
	gbmlparser_init(r,s);
	return r;
}

void free_gbmlparser( gbmlparser_t * self ) {
	free_string(gbmlparser_input(self));
	free_string(gbmlparser_curr_word(self));
	free_string(gbmlparser_curr_key(self));
	free_string(gbmlparser_curr_value(self));
	free(self);
}

//////////////////////
// parser functions //
//////////////////////

void gbmlparser_scope_in( gbmlparser_t * self ) {
}

void gbmlparser_scope_out( gbmlparser_t * self ) {
}

void gbmlparser_set_curr_key( gbmlparser_t * self ) {
}

void gbmlparser_set_curr_value( gbmlparser_t * self ) {
}

void gbmlparser_change_state( gbmlparser_t * self ) {
}

void gbmlparser_toggle_quote_mode( gbmlparser_t * self ) {
}

void gbmlparser_add_to_curr_word( gbmlparser_t * self ) {
}

void gbmlparser_clear_curr_word( gbmlparser_t * self ) {
}

dict_t * gbmlparser_parse( gbmlparser_t * self ) {

	if isnull(gbmlparser_input(self)) {
		return dict();
	}
	else {
		// make a brand new dict
		gbmlparser_curr(self) = dict();
		// add this dictionary to the stack
		list_add_last( gbmlparser_stack(self), gbmlparser_curr(self) );

		// loop through the entire string of input
		loop(i,string_length(gbmlparser_input(self))) {
			// get the current string
			gbmlparser_curr_char(self) = string_get(gbmlparser_input(self),i);
			// quotation character enables/disables quote mode.
			if (gbmlparser_curr_char(self) == '"') {
				// toggle quote mode
				gbmlparser_quote_mode(self) = !gbmlparser_quote_mode(self);
			}
			// scope in
			else if (gbmlparser_curr_char(self) == '{') {
				// check for quote mode
				if gbmlparser_quote_mode(self) {
					// add char to word if so.
					gbmlparser_curr_word_c(self) = string_put(gbmlparser_input(self),gbmlparser_curr_word_c(self),
						gbmlparser_curr_char(self));
				}
				// determine how to scope in based on the state
				else {
					// do we have data in our current word?
					if (string_virtual_length(gbmlparser_curr_word(self)) > 0) {
						// set the key first
						string_copy(gbmlparser_curr_key(self),string_data(gbmlparser_curr_word(self)));
						// erase the current word
						string_clear(gbmlparser_curr_word(self),nt());
					}

					// only write if the key does not exist.
					// keep in mind that it will take an empty string as a key as well.
					if isfalse(dict_contains( gbmlparser_curr(self), string_data(gbmlparser_curr_key(self)) )) {
						// add a new dictionary with the current key
						dict_t * u = dict();
						dict_set( gbmlparser_curr(self), string_data(gbmlparser_curr_key(self)), u );
						// set the current dict to the new one
						gbmlparser_curr(self) = u;
						// add the dict to the stack
						list_add_last( gbmlparser_stack(self), u );
					}
					// if the key DOES exist, simply scope into the dict.
					// use the internal dictentry we found earlier.
					else {
						gbmlparser_curr(self) = dictentry_data(_dict_contains_dictentry);
						list_add_last( gbmlparser_stack(self), gbmlparser_curr(self) );
					}
				}
			}
			else if (gbmlparser_curr_char(self) == '}') {
				if (gbmlparser_quote_mode(self)) {
					gbmlparser_curr_word_c(self) = string_put(gbmlparser_input(self),gbmlparser_curr_word_c(self),
						gbmlparser_curr_char(self));
				}
				// scope out
				else {
					if (list_count(gbmlparser_stack(self)) > 1) {

					}
				}
			}
			else if (gbmlparser_curr_char(self) == '"') {
				if gbmlparser_quote_mode(self) {
					gbmlparser_curr_word_c(self) = string_put(gbmlparser_input(self),gbmlparser_curr_word_c(self),
						gbmlparser_curr_char(self));
				}
				else {
				}
			}
			else if (gbmlparser_curr_char(self) == '=') {
				if gbmlparser_quote_mode(self) {
					gbmlparser_curr_word_c(self) = string_put(gbmlparser_input(self),gbmlparser_curr_word_c(self),
						gbmlparser_curr_char(self));
				}
				else {
				}
			}
			else if (gbmlparser_curr_char(self) == ';') {
				if gbmlparser_quote_mode(self) {
					gbmlparser_curr_word_c(self) = string_put(gbmlparser_input(self),gbmlparser_curr_word_c(self),
						gbmlparser_curr_char(self));
				}
				else {
				}
			}
			else if (gbmlparser_curr_char(self) == '#') {
				if gbmlparser_quote_mode(self) {
					gbmlparser_curr_word_c(self) = string_put(gbmlparser_input(self),gbmlparser_curr_word_c(self),
						gbmlparser_curr_char(self));
				}
				else {
				}
			}
			// whitespace?
			else if ( (gbmlparser_curr_char(self) == ' ') or (gbmlparser_curr_char(self) == '\t') or (gbmlparser_curr_char(self) == '\n') ) {
				if gbmlparser_quote_mode(self) {
					gbmlparser_curr_word_c(self) = string_put(gbmlparser_input(self),gbmlparser_curr_word_c(self),
						gbmlparser_curr_char(self));
				}
				// do nothing otherwise.
				else {
					// do nothing.
					emp();
				}
			}
			else {
				gbmlparser_curr_word_c(self) = string_put(gbmlparser_input(self),gbmlparser_curr_word_c(self),
					gbmlparser_curr_char(self));
			}
		}
	}
}



///////////////
// functions //
///////////////

// load a GBML object from a file.
dict_t * gbml_load( char * t ) {
	// open file for reading
	var(f) = SDL_RWFromFile(t,"r");
	// read this file only if it is not null.
	if exists(f) {
		// create a new string with the size of the file
		// (string API will make one extra char for null terminator)
		string_t * s = string(SDL_RWsize(f));
		// fill string data with file.
		SDL_RWread(f,string_data(s),1,SDL_RWsize(f));
		// parse the data with the string as input

		gbmlparser_t * ps = gbmlparser(s);
		dict_t * r = gbmlparser_parse(ps);
		return r;
	}
	else {
		return dict();
	}
}